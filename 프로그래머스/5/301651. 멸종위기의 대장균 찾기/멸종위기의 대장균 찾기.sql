-- 코드를 작성해주세요
# WITH RECURSIVE GENERATION AS (
#     SELECT
#         ID,
#         PARENT_ID,
#         1 AS GEN
#     FROM ECOLI_DATA
#     WHERE PARENT_ID IS NULL

#     UNION ALL

#     SELECT
#         E.ID,
#         E.PARENT_ID,
#         G.GEN + 1 AS GEN
#     FROM GENERATION AS G
#         INNER JOIN ECOLI_DATA AS E
#             ON G.ID = E.PARENT_ID
# )


# SELECT 
#     COUNT(G.GEN) AS COUNT,
#     G.GEN AS GENERATION
# FROM ECOLI_DATA AS A
#     LEFT JOIN ECOLI_DATA AS B
#         ON A.ID = B.PARENT_ID
#     JOIN GENERATION AS G
#         ON A.ID = G.ID
# WHERE B.ID IS NULL
# GROUP BY GEN
# ORDER BY GEN



WITH RECURSIVE TREEECOLIDATA(ID, PARENT_ID, DEPTH, CNT) AS (
SELECT A.ID
, A.PARENT_ID
, 1
, (SELECT COUNT(*)
FROM ECOLI_DATA as x
WHERE x.PARENT_ID = A.ID
) AS CNT
    
FROM ECOLI_DATA A
WHERE A.PARENT_ID IS NULL
    
UNION ALL
    
SELECT B.ID
, B.PARENT_ID
, T.DEPTH + 1
, (SELECT COUNT(*)
FROM ECOLI_DATA y
WHERE y.PARENT_ID = B.ID
) AS CNT
    
FROM ECOLI_DATA B
INNER JOIN TREEECOLIDATA T ON B.PARENT_ID = T.ID
), test as (
    select count(*) as cut
    from ecoli_data
)

# SELECT DISTINCT COUNT(z.depth) AS COUNT
# , DEPTH AS GENERATION
# FROM ECOLI_DATA AS A
#     LEFT JOIN ECOLI_DATA AS B
#       ON A.ID = B.PARENT_ID
#   JOIN TREEECOLIDATA Z
#        ON A.ID = z.ID
# WHERE B.ID IS NULL
# GROUP BY depth
# ORDER BY DEPTH ASC

# select count(depth) as count, depth as generation
# from treeecolidata as a
# where cnt = 0
# group by depth
# order by depth asc

# SELECT distinct (SELECT COUNT(*)
# FROM TREEECOLIDATA as a
# WHERE a.CNT = 0
# AND a.DEPTH = Z.DEPTH
# ) AS COUNT
# , DEPTH AS GENERATION
# FROM TREEECOLIDATA Z
# ORDER BY DEPTH ASC

SELECT 
    COUNT_TABLE.COUNT,
    Z.DEPTH AS GENERATION
FROM 
    (SELECT DEPTH, COUNT(*) AS COUNT
     FROM TREEECOLIDATA
     WHERE CNT = 0
     GROUP BY DEPTH) AS COUNT_TABLE
JOIN TREEECOLIDATA Z ON COUNT_TABLE.DEPTH = Z.DEPTH
GROUP BY Z.DEPTH, COUNT_TABLE.COUNT
ORDER BY Z.DEPTH ASC;
